version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Optional: for init SQL scripts
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myapp"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7
    container_name: redis_cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf  # Optional: custom config
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redispassword123
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - redis
    profiles:
      - tools  # Use: docker compose --profile tools up

  # # Optional: pgAdmin (Web UI for PostgreSQL)
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: pgadmin
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@example.com
  #     PGADMIN_DEFAULT_PASSWORD: admin123
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   networks:
  #     - app-network
  #   depends_on:
  #     - postgres
  #   profiles:
  #     - tools  # Use: docker compose --profile tools up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  # pgadmin_data:
  #   driver: local

networks:
  app-network:
    driver: bridge